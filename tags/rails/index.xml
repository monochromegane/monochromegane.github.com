<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rails on THINKING MEGANE</title><link>https://blog.monochromegane.com/tags/rails/</link><description>Recent content in rails on THINKING MEGANE</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 05 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="/tags/rails/" rel="self" type="application/rss+xml"/><item><title>Go言語のDB接続情報をRailsのdatabase.ymlから借用するライブラリをつくった</title><link>https://blog.monochromegane.com/blog/2015/07/05/dsn/</link><pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.monochromegane.com/blog/2015/07/05/dsn/</guid><description>
&lt;p&gt;最近、Rails資産のあるサーバーでGoツールを動かすことがあったので、DB接続情報を共通で使えるようにしたいと思い小さなライブラリをつくりました。&lt;/p&gt;
&lt;iframe src=&#34;//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmonochromegane%2Fdsn&#34; title=&#34;monochromegane/dsn&#34; class=&#34;embed-card embed-webcard&#34; scrolling=&#34;no&#34; frame border=&#34;0&#34; style=&#34;width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;&gt;&amp;lt;a href=&#34;https://github.com/monochromegane/dsn&#34;&amp;gt;monochromegane/dsn&amp;lt;/a&amp;gt;&lt;/iframe&gt;
&lt;p&gt;Railsのdatabase.ymlからGoのsql.Openに渡すDataSourceNameを出力します。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;database.ymlのパスと環境(productionやdevelopment)をパラメタとして渡してあげるだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;name, dsn, _ := dsn.FromRailsConfig(&amp;quot;myapp/config/database.yml&amp;quot;, &amp;quot;production&amp;quot;)
fmt.Printf(&amp;quot;[%s] %s&amp;quot;, name, dsn)
// =&amp;gt; [mysql] username:password@tcp(localhost:3306)/dbname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DSN、書式覚えるの厳しいので分かりやすいフォーマットの設定ファイルから読み込めるようになるのもうれしい感じです。&lt;/p&gt;
&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;
&lt;p&gt;今のところ、MySQL, PostgreSql, Sqlite に対応しています。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;実装と今後&#34;&gt;実装と今後&lt;/h1&gt;
&lt;p&gt;単純にYAMLを解析しているだけなので、ERBが含まれる項目はうまく動作しません。&lt;/p&gt;
&lt;p&gt;そのうち、環境変数からやフラグからもDSNを生成できるようにするつもりですが、まだ自分の用途では特に必要になってないのでつくってません。よければPRお待ちしております。&lt;/p&gt;</description></item><item><title>[Rails] Unite.vimでSettingsLogicの長いキー名を入力する(unite-yaml)</title><link>https://blog.monochromegane.com/blog/2013/11/10/unite-yaml/</link><pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate><guid>https://blog.monochromegane.com/blog/2013/11/10/unite-yaml/</guid><description>
&lt;p&gt;Railsで定数を管理する場合、&lt;a href=&#34;https://github.com/binarylogic/settingslogic&#34;&gt;SettingsLogic&lt;/a&gt;を使っていますが、プロジェクトが大きくなるとYAMLのキーが多くなったり、階層が深くなったりして入力が手間になってきます。
先週、Typoして時間をムダにしたのでUnite.vimでSettingsLogicのキー名を入力するUniteSource、&lt;a href=&#34;https://github.com/monochromegane/unite-yaml&#34;&gt;unite-yaml&lt;/a&gt;を作ってみました。&lt;/p&gt;
&lt;h1 id=&#34;unite-yaml&#34;&gt;unite-yaml&lt;/h1&gt;
&lt;p&gt;unite-yamlを使うと、SettingsLogicで &lt;code&gt;Settings.somekey.subkey.subsubkey.subsubsubkey&lt;/code&gt; のような長いキーをUniteの候補として選択、入力を行えます。&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;インストールはBundle、またはNeoBundleで&lt;code&gt;monochromegane/unite-yaml&lt;/code&gt;を指定してください。&lt;/p&gt;
&lt;p&gt;Bundleの場合は、&lt;code&gt;.vimrc&lt;/code&gt;に&lt;code&gt;Bundle &amp;quot;monochromegane/unite-yaml”&lt;/code&gt;を定義して、&lt;code&gt;:BundleInstall&lt;/code&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;h3 id=&#34;1-yamlファイルを選択する&#34;&gt;1. YAMLファイルを選択する&lt;/h3&gt;
&lt;p&gt;以下のコマンドでカレントディレクトリ以下の&lt;code&gt;*.yml&lt;/code&gt;ファイルが検索され、Uniteのウィンドウに表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;:Unite yaml-list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.monochromegane.com/images/2013/11/unite-yaml-list.png&#34; alt=&#34;unite yaml-list&#34; /&gt;&lt;/p&gt;
&lt;p&gt;対象のYAMLファイルを選択し、&lt;code&gt;Enter&lt;/code&gt;を押してください。&lt;br /&gt;
unite-yamlは&lt;code&gt;ERB enabled YAML&lt;/code&gt;もサポートしています。&lt;/p&gt;
&lt;h3 id=&#34;2-入力したいyamlのキーを選択する&#34;&gt;2. 入力したいYAMLのキーを選択する&lt;/h3&gt;
&lt;p&gt;選択したYAMLファイルに定義されているキーの一覧がSettingsLogicのフォーマット(アクセサのキーチェーン)で表示されます。
また、キー名のあとには該当する値も表示されます。&lt;/p&gt;
&lt;p&gt;以下のYAMLファイルを選択した場合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/application.yml
defaults: &amp;amp;defaults
cool:
saweet: nested settings
neat_setting: 24
awesome_setting: &amp;lt;%= &amp;quot;Did you know 5 + 5 = #{5 + 5}?&amp;quot; %&amp;gt;
development:
&amp;lt;&amp;lt;: *defaults
neat_setting: 800
test:
&amp;lt;&amp;lt;: *defaults
production:
&amp;lt;&amp;lt;: *defaults
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように展開されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.monochromegane.com/images/2013/11/unite-yaml.png&#34; alt=&#34;unite yaml&#34; /&gt;&lt;/p&gt;
&lt;p&gt;入力したいキー名を選択して、&lt;code&gt;Enter&lt;/code&gt;を押すと、カーソル位置にキー名が入力されます（値は含まれません）&lt;/p&gt;
&lt;h2 id=&#34;キーバインド&#34;&gt;キーバインド&lt;/h2&gt;
&lt;p&gt;以下のようなキーバインドをvimrcに定義しておくといいでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; yaml
let g:unite_yaml_prefix = &amp;quot;Settings.&amp;quot;
nnoremap &amp;lt;silent&amp;gt; ,y :&amp;lt;C-u&amp;gt;Unite yaml-list&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; ,Y :&amp;lt;C-u&amp;gt;UniteResume yaml-buffer&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;yaml-listから開いたYAMLのキー一覧は&lt;code&gt;yaml-buffer&lt;/code&gt;という名前のbufferで開かれているので上記のように&lt;code&gt;UniteResume&lt;/code&gt;を使ってYAMLの再パースなしに再度呼び出すことができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g:unite_yaml_prefix&lt;/code&gt;を定義すると、入力時のキー名の前に指定した語が追加されます。&lt;code&gt;Settings.&lt;/code&gt;を指定することで入力の手間を省くことができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;SettingsLogicは便利ですが、キーの打ち間違いや定義されているキーを見比べるためにファイル間を行ったり来たりして時間をムダにしがちです。
Unite.vimを使っている人は、unite-yamlを導入してみてはどうでしょうか。&lt;/p&gt;</description></item><item><title>Rails4でGemの資産がAssets Precomplieに含まれないときは</title><link>https://blog.monochromegane.com/blog/2013/09/07/rails4-only-compile-under-app-assets/</link><pubDate>Sat, 07 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.monochromegane.com/blog/2013/09/07/rails4-only-compile-under-app-assets/</guid><description>
&lt;p&gt;Rails4プロジェクトでGem内の画像ファイルやフォントファイルといった資産がprecompile対象に含まれない原因と対策をまとめておきます。&lt;/p&gt;
&lt;p&gt;原因は、assets precompileのデフォルトの対象変更です。対策としては以下の方法をとる必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assets precompile に含まれるよう資産を移動する&lt;/li&gt;
&lt;li&gt;assets precompile に含めたい資産を明示する&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;
&lt;h2 id=&#34;precompile対象ディレクトリの変更&#34;&gt;precompile対象ディレクトリの変更&lt;/h2&gt;
&lt;p&gt;Rails4では、パスにapp/assetsを含む資産のみをデフォルトのprecompile対象とするように変更されました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/pull/7968&#34;&gt;rails/rails - Only compile non-js/css under app/assets by default&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;precompileのパスに置かれているREADME.mdのような&amp;rdquo;loose&amp;rdquo;なファイルを対象から外すこと、&lt;code&gt;app/&lt;/code&gt;以下をオートロードするRailsの方針と合わせることなどが理由として挙げられています。(※1)&lt;/p&gt;
&lt;h2 id=&#34;対象ディレクトリはどうなったか&#34;&gt;対象ディレクトリはどうなったか&lt;/h2&gt;
&lt;p&gt;このプルリクでは以下のような修正が取り込まれています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;railties/lib/rails/application/configuration.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@assets.precompile = [ Proc.new { |path, fn| fn =~ /app\/assets/ &amp;amp;&amp;amp; !%w(.js .css).include?(File.extname(path)) },
/(?:\/|\\|\A)application\.(css|js)$/ ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これにより、&lt;code&gt;Rails.application.config.assets.paths&lt;/code&gt;に定義されているディレクトリのうち、&lt;code&gt;app/assets&lt;/code&gt;というパスを含む、js, css 以外の資産とapplication.(js|css)が対象となり、&lt;code&gt;lib/assets&lt;/code&gt;や&lt;code&gt;vendor/assets&lt;/code&gt;にある画像やフォントといった資産はprecompileの対象外となりました。&lt;/p&gt;
&lt;p&gt;もし、プロジェクトで利用しているGemが上記のディレクトリに js, css 以外のファイル（imageなど）をおいていた場合、本番配布時に頭を抱えることになります(※2)。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;対策&#34;&gt;対策&lt;/h1&gt;
&lt;h2 id=&#34;assets-precompile-に含まれるよう資産を移動する&#34;&gt;assets precompile に含まれるよう資産を移動する&lt;/h2&gt;
&lt;p&gt;これがベストな解決案だと思います。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lib/assets&lt;/code&gt;や&lt;code&gt;vendor/assets&lt;/code&gt;を&lt;code&gt;app/assets&lt;/code&gt;に移動することで、Railsは配下の資産をprecompile対象として認識してくれます。&lt;/p&gt;
&lt;p&gt;手元で試したところ、Rails3でも問題なく動作しました。&lt;/p&gt;
&lt;p&gt;** 使っているGemが対応していなかったので こんな感じでPullRequest を出しました **&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pkurek/flatui-rails/pull/27&#34;&gt;pkurek/flatui-rails - Move assets to app/assets for Rails 4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;assets-precompile-に含めたい資産を明示する&#34;&gt;assets precompile に含めたい資産を明示する&lt;/h2&gt;
&lt;p&gt;Gemを触りたくない場合の対策です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/application.rb&lt;/code&gt;に以下のような記述を追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.precompile += %w(*.png *.jpg *.jpeg *.gif)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;読み込ませたい資産にあわせて配列内の拡張子を変更してください。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Rails.application.config.assets.paths&lt;/code&gt;に含まれているのにPrecomplieされない点で大いにハマりましたが、GithubのPullRequestやIssueで経緯や理由を把握できました。&lt;/p&gt;
&lt;p&gt;Githubほんと便利。&lt;/p&gt;
&lt;p&gt;日本語の情報がまだ少ないのでまとめてみました。お役に立てばうれしいです。&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;※1&lt;/code&gt;. Issue内容を見るとこの変更に困惑している意見も一部ありますが、DHHは、&lt;code&gt;This makes sense to me :+1:&lt;/code&gt;な感じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;※2&lt;/code&gt;. 抱えました。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>[Ruby] ThorでWebAPIサービスを立ち上げるGem&#34;トールハンマー&#34;をつくった</title><link>https://blog.monochromegane.com/blog/2013/06/15/thor-hammer/</link><pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate><guid>https://blog.monochromegane.com/blog/2013/06/15/thor-hammer/</guid><description>
&lt;p&gt;コマンドラインツールをつくって、もっと多くのひとに気軽に利用してもらいたいとき、Webアプリとして作りなおすのが面倒だなーと思うことがあります。&lt;/p&gt;
&lt;p&gt;コマンドラインツールをそのままWebアプリとして使えるようにする仕組みが欲しくて、そんな Gem、&lt;code&gt;ThorHammer&lt;/code&gt;トールハンマーをつくりました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;thorって&#34;&gt;Thorって？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://whatisthor.com/&#34;&gt;Thor&lt;/a&gt;（トール、ソー、雷神）はRubyでコマンドラインツールをかんたんにつくるためのGemです。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;thorhammerって&#34;&gt;ThorHammerって？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/monochromegane/thor_hammer&#34;&gt;ThorHammer&lt;/a&gt;はThorでつくったCLIをWebAPIにするGemです。&lt;/p&gt;
&lt;p&gt;マイティー・ソーが武器のハンマーをつかって、雷を広げて攻撃するように、ThorでつくったCLI機能をWebに広げるGemです。※1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.monochromegane.com/images/2013/06/thor_hammer.png&#34; alt=&#34;Thor Hammer&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;どう使うの&#34;&gt;どう使うの？&lt;/h1&gt;
&lt;p&gt;ThorHammerは、RailsアプリとしてWebAPIを公開します。&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;Railsのプロジェクトを作成して、Gemfileに以下を追記します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;thor_hammer&#39;
gem &#39;Your Thor CLI&#39; # WebAPIとして公開するThorのCLI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとは&lt;code&gt;bundle install&lt;/code&gt;でOKです。&lt;/p&gt;
&lt;h2 id=&#34;ジェネレータ&#34;&gt;ジェネレータ&lt;/h2&gt;
&lt;p&gt;ThorHammerは、WebAPIを作成するためのジェネレータを提供します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rails g thor_hammer:api ThorCliのクラス名 公開APIのパス
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引数に指定する値は以下を参考にしてください。&lt;/p&gt;
&lt;h3 id=&#34;thorcliのクラス名&#34;&gt;ThorCliのクラス名&lt;/h3&gt;
&lt;p&gt;第一引数は、Thor CLI の起点となるクラス名を指定します。
起点となるクラス名は、Thor を継承したクラスとして作成されているはずです。
また、モジュール名も必要になります。&lt;/p&gt;
&lt;p&gt;以下のような Thor CLI の場合、&lt;code&gt;SampleThorCli::Runner&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module SampleThorCli
class Runner &amp;lt; Thor
# 中略
end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;公開apiのパス&#34;&gt;公開APIのパス&lt;/h3&gt;
&lt;p&gt;第二引数は、WebAPIの公開時のパスを指定します。
省略時は、第一引数を&lt;code&gt;underscore&lt;/code&gt;したものが適用されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;省略時&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rails g thor_hammer:api SampleThorCli::Runner&lt;/code&gt; =&amp;gt; &lt;code&gt;http://hostname/sample_thor_cli/runner&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定時&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rails g thor_hammer:api SampleThorCli::Runner api&lt;/code&gt; =&amp;gt; &lt;code&gt;http://hostname/api&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;アクセス&#34;&gt;アクセス&lt;/h2&gt;
&lt;p&gt;以上で、あなたのThor CLI がWebAPIとして公開する準備が整いました。
&lt;code&gt;rails server&lt;/code&gt;でRailsアプリを起動し、アクセスしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://hostname/api/subcommand/arg1,arg2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLIとして利用した場合と同じ結果をそのまま取得することができます。（JSON, XML形式への対応は今後予定）&lt;/p&gt;
&lt;h3 id=&#34;subcommand&#34;&gt;subcommand&lt;/h3&gt;
&lt;p&gt;サブコマンドは、あなたのThor CLIのサブコマンドを指定します。&lt;/p&gt;
&lt;h3 id=&#34;arg1-arg2&#34;&gt;arg1,arg2&lt;/h3&gt;
&lt;p&gt;サブコマンドに引数があれば、指定することができます。
引数が複数の場合は、&lt;code&gt;,&lt;/code&gt;を間に挟んで指定します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今はThor限定ですが、Rakeタスクなんかもできるようにして、CIと組み合わせると面白くなるかも。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;※1. はい、もちろん後付けです。&lt;/p&gt;</description></item></channel></rss>